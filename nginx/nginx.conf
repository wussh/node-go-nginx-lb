events {
    worker_connections 1024;  # Maximum number of simultaneous connections that each worker process can handle.
}

http {
    # Define upstream servers for each load balancing strategy.

    # Round Robin load balancing strategy
    upstream appRoundRobin {
        server 127.0.0.1:3022;
        server 127.0.0.1:3023;
        server 127.0.0.1:3024;
    }

    # IP Hash load balancing strategy
    upstream appIPHash {
        ip_hash;  # Ensures that requests from the same IP are always routed to the same server.
        server 127.0.0.1:3022;
        server 127.0.0.1:3023;
        server 127.0.0.1:3024;
    }

    # Least Connections load balancing strategy
    upstream appLeastConn {
        least_conn;  # Routes each request to the server with the fewest active connections.
        server 127.0.0.1:3022;
        server 127.0.0.1:3023;
        server 127.0.0.1:3024;
    }

    # Define a rate limiter to restrict requests to a certain rate.
    limit_req_zone $binary_remote_addr zone=ourRateLimiter:10m rate=15r/s; # 1m = 16000 IP

    # Configure proxy cache to cache responses for improved performance.
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=cache_one:5m inactive=10m;

    # Define a custom log format for upstream requests.
    log_format upstreamlog 'remote_addr: $remote_addr | '
        'remote_user: $remote_user | '
        'time_local: $time_local | '
        'request: $request | '
        'status: $status | '
        'body_bytes_sent: $body_bytes_sent | '
        'http_referer: $http_referer | '
        'upstream_addr: $upstream_addr | '
        'upstream_response_time: $upstream_response_time | '
        'request_time: $request_time | '
        'msec: $msec | '
        'http_user_agent: $http_user_agent';

    server {
        listen 80;  # Listen for incoming connections on port 80.

        # Define different locations and their corresponding configurations.

        location / {
            # Apply rate limiting to requests in this location.
            limit_req zone=ourRateLimiter;
            limit_req_status 429;  # Return 429 status code for requests exceeding the rate limit.
            
            # Set a custom header before passing the request to the upstream server.
            proxy_set_header X-Custom-Header this-was-custom-header;
            
            # Route requests to the upstream server using the Round Robin strategy.
            proxy_pass http://appRoundRobin;
        }

        location /ipHash {
            # Log detailed information about requests using the custom log format.
            access_log /var/log/app/app.log upstreamlog;
            
            # Route requests to the upstream server using the IP Hash strategy.
            proxy_pass http://appIPHash;
        }

        location /leastConn {
            # Set a custom header before passing the request to the upstream server.
            proxy_set_header X-Custom-Header this-was-custom-header;
            
            # Route requests to the upstream server using the Least Connections strategy.
            proxy_pass http://appLeastConn;
        }

        location /metadata {
            # Configure proxy cache for caching responses.
            proxy_cache cache_one;
            proxy_cache_min_uses 5;
            proxy_cache_methods HEAD GET;
            proxy_cache_valid 200 304 30s;
            proxy_cache_key $uri;
            
            # Route requests to the upstream server without specifying a load balancing strategy.
            proxy_pass http://app;
        }
    }
}
